{"version":3,"file":"comunicationService.js","sourceRoot":"","sources":["comunicationService.ts"],"names":[],"mappings":"AAAA,qDAAqD;AACrD,IAAU,cAAc,CAmDvB;AAnDD,WAAU,cAAc,EAAC,CAAC;IACtB;QA6CI,6BAAoB,MAAuB,EAAU,GAAiB;YA7C1E,iBAgDC;YAHuB,WAAM,GAAN,MAAM,CAAiB;YAAU,QAAG,GAAH,GAAG,CAAc;YA3C/D,YAAO,GAAG;gBACb,KAAI,CAAC,MAAM,CAAC,IAAI,CAAO,QAAQ,EAAE;oBAC7B,WAAW,EAAE,QAAQ;oBACrB,UAAU,EAAE,QAAQ;oBACpB,OAAO,EAAE,kBAAkB;oBAC3B,UAAU,EAAE,OAAO;oBACnB,UAAU,EAAE,UAAU;oBACtB,UAAU,EAAE,OAAO;iBACtB,CAAC,CAAC,IAAI,CAAC,UAAC,CAAC;oBACN,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;gBAC3B,CAAC,EAAE,CAAC,UAAA,GAAG;oBACH,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;gBACrB,CAAC,CAAC,CAAC,CAAC;YACR,CAAC,CAAA;YAEM,UAAK,GAAG,UAAC,QAAgB,EAAE,QAAgB;gBAC9C,IAAI,QAAQ,GAAG,KAAI,CAAC,GAAG,CAAC,KAAK,EAAU,CAAC;gBACxC,KAAI,CAAC,MAAM,CAAC,IAAI,CAAwD,aAAa,EAAE;oBACnF,QAAQ,EAAE,QAAQ;oBAClB,QAAQ,EAAE,QAAQ;iBACrB,CAAC,CAAC,IAAI,CAAC,UAAC,GAAG;oBACR,EAAE,CAAC,CAAC,GAAG,CAAC,IAAI,IAAI,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;wBAChC,0BAAW,CAAC,SAAS,GAAG,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC;wBACvC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;oBAC3B,CAAC;oBAAC,IAAI,CAAC,CAAC;wBACJ,IAAI,MAAM,GAAG,yBAAyB,CAAC;wBACvC,EAAE,CAAC,CAAC,GAAG,CAAC,IAAI,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,IAAI,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;4BACrD,MAAM,GAAG,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC;wBAC9B,CAAC;wBACD,0BAAW,CAAC,SAAS,GAAG,IAAI,CAAC;wBAC7B,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;oBAC5B,CAAC;gBACL,CAAC,EAAE,UAAC,GAAG;oBACH,0BAAW,CAAC,SAAS,GAAG,IAAI,CAAC;oBAC7B,QAAQ,CAAC,MAAM,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC,CAAC;oBAChC,yBAAyB;gBAC7B,CAAC,CAAC,CAAC;gBACH,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC;YAE5B,CAAC,CAAA;QAMD,CAAC;QAJM,2BAAO,GAAG,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;QAKrC,0BAAC;IAAD,CAAC,AAhDD,IAgDC;IAhDY,kCAAmB,sBAgD/B,CAAA;IACD,OAAO,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,sBAAsB,EAAE,mBAAmB,CAAC,CAAC;AAClF,CAAC,EAnDS,cAAc,KAAd,cAAc,QAmDvB","sourcesContent":["/// <reference path='../../../_clientRefernces.ts' />\r\nnamespace antiFakeClient {\r\n    export class CommunictionService {\r\n\r\n        public addUser = () => {\r\n            this._$http.post<void>('/users', {\r\n                'firstName': 'Second',\r\n                'lastName': 'Second',\r\n                'email': 'user@example.com',\r\n                'username': 'vladi',\r\n                'password': 'password',\r\n                'provider': 'local'\r\n            }).then((d) => {\r\n                console.log('success');\r\n            }, (err => {\r\n                console.log(err);\r\n            }));\r\n        }\r\n\r\n        public login = (username: string, password: string): ng.IPromise<string> => {\r\n            var retDefer = this._$q.defer<string>();\r\n            this._$http.post<{ gotToken: boolean; token: string; message: string }>('/user/login', {\r\n                username: username,\r\n                password: password\r\n            }).then((res) => {\r\n                if (res.data && res.data.gotToken) {\r\n                    CurrentUser.userToken = res.data.token;\r\n                    retDefer.resolve(null);\r\n                } else {\r\n                    var errMsg = 'Can\\'t login! try later';\r\n                    if (res.data && !res.data.gotToken && res.data.message) {\r\n                        errMsg = res.data.message;\r\n                    }\r\n                    CurrentUser.userToken = null;\r\n                    retDefer.reject(errMsg);\r\n                }\r\n            }, (err) => {\r\n                CurrentUser.userToken = null;\r\n                retDefer.reject(err.toString());\r\n                //todo show error to user\r\n            });\r\n            return retDefer.promise;\r\n\r\n        }\r\n\r\n        static $inject = ['$http', '$q'];\r\n\r\n        constructor(private _$http: ng.IHttpService, private _$q: ng.IQService) {\r\n\r\n        }\r\n    }\r\n    angular.module('client').service('communicationService', CommunictionService);\r\n}"]}