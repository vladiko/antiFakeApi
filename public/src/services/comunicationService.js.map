{"version":3,"file":"comunicationService.js","sourceRoot":"","sources":["comunicationService.ts"],"names":[],"mappings":"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","sourcesContent":["/// <reference path='../../../_clientRefernces.ts' />\r\nnamespace antiFakeClient {\r\n    export class CommunictionService {\r\n        //public addUser = () => {\r\n        //    this._$http.post<void>('/users', {\r\n        //        'firstName': 'Second',\r\n        //        'lastName': 'Second',\r\n        //        'email': 'user@example.com',\r\n        //        'username': 'vladi',\r\n        //        'password': 'password',\r\n        //        'provider': 'local'\r\n        //    }).then((d) => {\r\n        //        console.log('success');\r\n        //    }, (err => {\r\n        //        console.log(err);\r\n        //    }));\r\n        //}\r\n        private checkResStatus(status) {\r\n            if (status == '401') {\r\n                //todo show timeout message\r\n                CurrentUser.userToken = null;\r\n            }\r\n        }\r\n\r\n        public getAllUsers = (username: string, usertoken: string): ng.IPromise<User[]> => {\r\n            var retDefer = this._$q.defer<User[]>();\r\n            this._$http.get<User[]>('/user', {\r\n                params: {\r\n                    token: CurrentUser.userToken,\r\n                    username: CurrentUser.userName\r\n                }\r\n            }).then((res) => {\r\n                retDefer.resolve(res.data)\r\n            },\r\n                (err) => {\r\n                    retDefer.reject(err)\r\n                    if (err.status) {\r\n                        this.checkResStatus(err.status);\r\n                    }\r\n                });\r\n            return retDefer.promise;\r\n        };\r\n\r\n        public destroyUser(username) {\r\n            var retDefer = this._$q.defer<Object>();\r\n            this._$http.delete<Object>('/user/' + username, {\r\n                params: {\r\n                    token: CurrentUser.userToken,\r\n                    username: CurrentUser.userName\r\n                }\r\n            }).then((res) => {\r\n                retDefer.resolve(res.data)\r\n            },\r\n                (err) => {\r\n                    retDefer.reject(err)\r\n                    if (err.status) {\r\n                        this.checkResStatus(err.status);\r\n                    }\r\n                });\r\n            return retDefer.promise;\r\n        }\r\n\r\n        public login = (username: string, password: string): ng.IPromise<string> => {\r\n            var retDefer = this._$q.defer<string>();\r\n            CurrentUser.userName = username;\r\n            this._$http.post<{ gotToken: boolean; token: string; message: string }>('/user/login', {\r\n                username: username,\r\n                password: password\r\n            }).then((res) => {\r\n                if (res.data && res.data.gotToken) {\r\n                    CurrentUser.userToken = res.data.token;\r\n                    retDefer.resolve(null);\r\n                } else {\r\n                    var errMsg = 'Can\\'t login! try later';\r\n                    if (res.data && !res.data.gotToken && res.data.message) {\r\n                        errMsg = res.data.message;\r\n                    }\r\n                    CurrentUser.userToken = null;\r\n                    retDefer.reject(errMsg);\r\n                }\r\n            }, (err) => {\r\n                CurrentUser.userToken = null;\r\n                retDefer.reject(err.toString());\r\n                //todo show error to user\r\n            });\r\n            return retDefer.promise;\r\n\r\n        }\r\n\r\n        static $inject = ['$http', '$q'];\r\n\r\n        constructor(private _$http: ng.IHttpService, private _$q: ng.IQService) {\r\n\r\n        }\r\n    }\r\n    angular.module('client').service('communicationService', CommunictionService);\r\n}"]}