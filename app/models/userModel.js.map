{"version":3,"file":"userModel.js","sourceRoot":"","sources":["userModel.ts"],"names":[],"mappings":"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","sourcesContent":["import * as mongoose from 'mongoose';\r\nimport * as crypto from 'crypto';\r\nvar Schema = mongoose.Schema;\r\nvar UserSchema = new Schema({\r\n    firstName: String,\r\n    lastName: String,\r\n    email: {\r\n        type: String,\r\n        match: [/.+\\@.+\\..+/, \"Please fill a valid e-mail address\"]\r\n    },\r\n    username: {\r\n        type: String,\r\n        unique: true,\r\n        required: 'Username is required',\r\n        trim: true\r\n    },\r\n    password: {\r\n        type: String,\r\n        validate: [\r\n            function (password) {\r\n                return password && password.length > 6;\r\n            }, 'Password should be longer'\r\n        ]\r\n    },\r\n    salt: {\r\n        type: String\r\n    },\r\n    provider: {\r\n        type: String,\r\n        required: 'Provider is required'\r\n    },\r\n    providerId: String,\r\n    providerData: {},\r\n    created: {\r\n        type: Date,\r\n        default: Date.now\r\n    }\r\n});\r\nUserSchema.virtual('fullName').get(function () {\r\n    return this.firstName + ' ' + this.lastName;\r\n}).set(function (fullName) {\r\n    var splitName = fullName.split(' ');\r\n    this.firstName = splitName[0] || '';\r\n    this.lastName = splitName[1] || '';\r\n});\r\nUserSchema.pre('save', function (next) {\r\n    if (this.password) {\r\n        this.salt = new\r\n            Buffer(crypto.randomBytes(16).toString('base64'), 'base64');\r\n        this.password = this.hashPassword(this.password);\r\n    }\r\n    next();\r\n});\r\nUserSchema.methods.hashPassword = function (password) {\r\n    return crypto.pbkdf2Sync(password, this.salt, 10000,\r\n        64).toString('base64');\r\n};\r\nUserSchema.methods.authenticate = function (password) {\r\n    return this.password === this.hashPassword(password);\r\n};\r\nUserSchema.statics.findUniqueUsername = function (username, suffix,\r\n    callback) {\r\n    var _this = this;\r\n    var possibleUsername = username + (suffix || '');\r\n    _this.findOne({\r\n        username: possibleUsername\r\n    }, function (err, user) {\r\n        if (!err) {\r\n            if (!user) {\r\n                callback(possibleUsername);\r\n            } else {\r\n                return _this.findUniqueUsername(username, (suffix || 0) +\r\n                    1, callback);\r\n            }\r\n        } else {\r\n            callback(null);\r\n        }\r\n    });\r\n};\r\nUserSchema.set('toJSON', {\r\n    getters: true,\r\n    virtuals: true\r\n});\r\nmongoose.model('User', UserSchema);"]}