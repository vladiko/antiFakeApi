{"version":3,"file":"fakeChecker.controller.js","sourceRoot":"","sources":["fakeChecker.controller.ts"],"names":[],"mappings":"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","sourcesContent":["import * as mongoose from 'mongoose';\r\nvar ItemKey = require('mongoose').model('ItemKey');\r\nvar Product = require('mongoose').model('Product');\r\nvar Producer = require('mongoose').model('Producer');\r\nlet fakeCheckerDal = require('../dal/fakeChecker.dal');\r\nimport UuidGenerator = require('../services/uuidGenerator');\r\n\r\n\r\nclass KeyRequestDataEntry {\r\n    constructor(public data: string, public serial: string) { }\r\n}\r\n\r\nexport class fakeCheckerController {\r\n    public static render = (req, res) => {\r\n        var ids = [];\r\n        for (var i = 0; i < 100; i++) {\r\n            ids.push(UuidGenerator.UuidGenerator.generateId());\r\n        }\r\n        var uuid = UuidGenerator.UuidGenerator.generateId(); fakeCheckerDal.check('d', (docs: Array<Object>) => {\r\n            var names = [];\r\n            docs.forEach((d: any) => { names.push(JSON.stringify(d)); });\r\n            var idStrins = ids.join('</br>');\r\n            res.send(idStrins + ' Hello World Express Controller: ' + names.join(', '));\r\n        });\r\n    };\r\n\r\n    public static keyByUIID = (req, res) => {\r\n        ItemKey.findOne({\r\n            \"uuid\": req.params.uuid\r\n        }).populate({\r\n            path: 'product',\r\n            model: 'Product',\r\n            populate: {\r\n                path: 'producer',\r\n                model: 'Producer'\r\n            }\r\n        }).exec((err, item) => {\r\n            if (err) {\r\n                return (err);\r\n            } else {\r\n                if (item) {\r\n                    var retOb: any = {};\r\n                    retOb.productName = item.product.productName;\r\n                    retOb.companyName = item.product.producer.companyName;\r\n                    retOb.serial = item.serial;\r\n                    retOb.data = item.data;\r\n                    retOb.wasOpen = item.wasOpen;\r\n                    retOb.created = item.created;\r\n                    retOb.openDate = item.openDate;\r\n                    retOb.checkCounter = item.checkCounter++;\r\n                    item.wasOpen = true;\r\n                    if (!item.openDate) {\r\n                        item.openDate = Date.now();\r\n                    }\r\n                    item.save(saveErr => {\r\n                        if (saveErr) {\r\n                            //console.log(JSON.stringify(saveErr));\r\n                        }\r\n                    });\r\n                    res.json(retOb);\r\n                } else {\r\n                    res.json(null);\r\n                }\r\n            }\r\n        });\r\n    };\r\n\r\n    public static list = (req, res, next) => {\r\n        ItemKey.find({}).exec((err, itemKeys: Array<Object>) => {\r\n            if (err) {\r\n                return next(err);\r\n            } else {\r\n                res.json(itemKeys.length);\r\n            }\r\n        });\r\n    };\r\n    public static create = (req, res, next) => {\r\n        var productName = req.body.productName;\r\n        var datas = <KeyRequestDataEntry[]>req.body.datas;\r\n        var commonData = req.body.data;\r\n        var commonSerial = parseInt(req.body.serial);\r\n        var amount = req.body.amount;\r\n        var keysForDatas;\r\n        if (datas && Array.isArray(datas)) {\r\n            keysForDatas = true;\r\n        } else {\r\n\r\n            keysForDatas = false;\r\n        }\r\n\r\n        Product.findOne({ uniqShortProductName: productName }, 'id', (err, product) => {\r\n            if (err) {\r\n                //\r\n            } else {\r\n                var keysToReturn = [];\r\n                if (keysForDatas) {\r\n                    datas.forEach((d: KeyRequestDataEntry) => {\r\n                        var itemKey: any = new Object();\r\n                        itemKey.product = product.id;\r\n                        itemKey.uuid = UuidGenerator.UuidGenerator.generateId();\r\n                        itemKey.data = d.data;\r\n                        itemKey.serial = d.serial;\r\n                        keysToReturn.push(itemKey);\r\n                    });\r\n\r\n\r\n                } else {\r\n                    if (!commonSerial) {\r\n                        commonSerial = 0;\r\n                    }\r\n                    for (var i = 0; i < amount; i++) {\r\n                        var itemKey: any = new Object();\r\n                        itemKey.product = product.id;\r\n                        itemKey.uuid = UuidGenerator.UuidGenerator.generateId();\r\n                        itemKey.serial = commonSerial++;\r\n                        itemKey.data = commonData;\r\n                        keysToReturn.push(itemKey);\r\n                    }\r\n                }\r\n                ItemKey.collection.insert(keysToReturn, (err, docs) => {\r\n                    if (err) {\r\n                        return next(err);\r\n                    } else {\r\n                        res.json(docs);\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\n//module.exports = {\r\n//    render: (req, res) => {\r\n//        var ids = [];\r\n//        for (var i = 0; i < 100; i++) {\r\n//            ids.push(UuidGenerator.UuidGenerator.generateId());\r\n//        }\r\n//        var uuid = UuidGenerator.UuidGenerator.generateId(); fakeCheckerDal.check('d', (docs: Array<Object>) => {\r\n//            var names = [];\r\n//            docs.forEach((d: any) => { names.push(JSON.stringify(d)); });\r\n//            var idStrins = ids.join('</br>');\r\n//            res.send(idStrins + ' Hello World Express Controller: ' + names.join(', '));\r\n//        });\r\n//    },\r\n\r\n//    keyByUIID: (req, res) => {\r\n//        ItemKey.findOne({\r\n//            \"uuid\": req.params.uuid\r\n//        }).populate({\r\n//            path: 'product',\r\n//            model: 'Product',\r\n//            populate: {\r\n//                path: 'producer',\r\n//                model: 'Producer'\r\n//            }\r\n//        }).exec((err, item) => {\r\n//            if (err) {\r\n//                return (err);\r\n//            } else {\r\n//                if (item) {\r\n//                    var retOb: any = {};\r\n//                    retOb.productName = item.product.productName;\r\n//                    retOb.companyName = item.product.producer.companyName;\r\n//                    retOb.serial = item.serial;\r\n//                    retOb.data = item.data;\r\n//                    retOb.wasOpen = item.wasOpen;\r\n//                    retOb.created = item.created;\r\n//                    retOb.openDate = item.openDate;\r\n//                    retOb.checkCounter = item.checkCounter++;\r\n//                    item.wasOpen = true;\r\n//                    if (!item.openDate) {\r\n//                        item.openDate = Date.now();\r\n//                    }\r\n//                    item.save(saveErr => {\r\n//                        if (saveErr) {\r\n//                            //console.log(JSON.stringify(saveErr));\r\n//                        }\r\n//                    });\r\n//                    res.json(retOb);\r\n//                } else {\r\n//                    res.json(null);\r\n//                }\r\n//            }\r\n//        });\r\n//    },\r\n\r\n//    list: (req, res, next) => {\r\n//        ItemKey.find({}).exec((err, itemKeys: Array<Object>) => {\r\n//            if (err) {\r\n//                return next(err);\r\n//            } else {\r\n//                res.json(itemKeys.length);\r\n//            }\r\n//        });\r\n//    },\r\n//    create: (req, res, next) => {\r\n//        var productName = req.body.productName;\r\n//        var datas = <KeyRequestDataEntry[]>req.body.datas;\r\n//        var commonData = req.body.data;\r\n//        var commonSerial = parseInt(req.body.serial);\r\n//        var amount = req.body.amount;\r\n//        var keysForDatas;\r\n//        if (datas && Array.isArray(datas)) {\r\n//            keysForDatas = true;\r\n//        } else {\r\n\r\n//            keysForDatas = false;\r\n//        }\r\n\r\n//        Product.findOne({ uniqShortProductName: productName }, 'id', (err, product) => {\r\n//            if (err) {\r\n//                //\r\n//            } else {\r\n//                var keysToReturn = [];\r\n//                if (keysForDatas) {\r\n//                    datas.forEach((d: KeyRequestDataEntry) => {\r\n//                        var itemKey: any = new Object();\r\n//                        itemKey.product = product.id;\r\n//                        itemKey.uuid = UuidGenerator.UuidGenerator.generateId();\r\n//                        itemKey.data = d.data;\r\n//                        itemKey.serial = d.serial;\r\n//                        keysToReturn.push(itemKey);\r\n//                    });\r\n\r\n\r\n//                } else {\r\n//                    if (!commonSerial) {\r\n//                        commonSerial = 0;\r\n//                    }\r\n//                    for (var i = 0; i < amount; i++) {\r\n//                        var itemKey: any = new Object();\r\n//                        itemKey.product = product.id;\r\n//                        itemKey.uuid = UuidGenerator.UuidGenerator.generateId();\r\n//                        itemKey.serial = commonSerial++;\r\n//                        itemKey.data = commonData;\r\n//                        keysToReturn.push(itemKey);\r\n//                    }\r\n//                }\r\n//                ItemKey.collection.insert(keysToReturn, (err, docs) => {\r\n//                    if (err) {\r\n//                        return next(err);\r\n//                    } else {\r\n//                        res.json(docs);\r\n//                    }\r\n//                });\r\n//            }\r\n//        });\r\n//    }\r\n//}"]}