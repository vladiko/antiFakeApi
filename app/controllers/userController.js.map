{"version":3,"file":"userController.js","sourceRoot":"","sources":["userController.ts"],"names":[],"mappings":";AAAA,IAAI,IAAI,GAAG,OAAO,CAAC,UAAU,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;AAC7C,IAAY,QAAQ,WAAM,UAAU,CAAC,CAAA;AACrC,IAAY,GAAG,WAAM,cAAc,CAAC,CAAA;AACpC,WAAW,CAAC;IACR,qCAAqC;AACzC,CAAC,EAAE,KAAK,CAAC,CAAC;AACV,MAAM,CAAC,OAAO,GAAG;IACb,aAAa,EAAE,UAAC,GAAG,EAAE,GAAG,EAAE,IAAI;QAC1B,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,eAAe,EAAE,CAAC,CAAC,CAAC;YACzB,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACxB,OAAO,EAAE,uBAAuB;aACnC,CAAC,CAAC;QACP,CAAC;QACD,IAAI,EAAE,CAAC;IACX,CAAC;IACD,IAAI,EAAE,UAAC,GAAG,EAAE,GAAG,EAAE,IAAI;QACjB,IAAI,CAAC,IAAI,CAAC,EAAE,EAAE,UAAC,GAAG,EAAE,KAAK;YACrB,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;gBACN,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YACrB,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YACpB,CAAC;QACL,CAAC,CAAC,CAAC;IACP,CAAC;IACD,MAAM,EAAE,UAAC,GAAG,EAAE,GAAG,EAAE,IAAI;QACnB,IAAI,IAAI,GAAG,IAAI,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QAC9B,IAAI,CAAC,IAAI,CAAC,UAAC,GAAG;YACV,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;gBACN,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YACrB,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACnB,CAAC;QACL,CAAC,CAAC,CAAC;IACP,CAAC;IACD,KAAK,EAAE,UAAC,GAAG,EAAE,GAAG,EAAE,IAAI;QAClB,QAAQ,CAAC,YAAY,CAAC,OAAO,EAAE,UAAU,GAAG,EAAE,IAAI,EAAE,IAAI;YACpD,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;gBAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YAAC,CAAC;YAC9B,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;gBAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YAAC,CAAC;YACxC,GAAG,CAAC,IAAI,GAAG,IAAI,CAAC;YAChB,IAAI,KAAK,GAAG,GAAG,CAAC,IAAI,CAAC,IAAI,EAAE,gBAAgB,CAAC,CAAC;YAC7C,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACpB,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC;IACvB,CAAC;IACD,MAAM,EAAE,UAAC,GAAG,EAAE,GAAG,EAAE,IAAI;QACnB,GAAG,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,CAAC,CAAC;IACjC,CAAC;CACJ,CAAA","sourcesContent":["var User = require('mongoose').model('User');\r\nimport * as passport from 'passport';\r\nimport * as jwt from 'jsonwebtoken';\r\nsetInterval(() => {\r\n    //logout for users that the token is \r\n}, 60000);\r\nmodule.exports = {\r\n    requiresLogin: (req, res, next) => {\r\n        if (!req.isAuthenticated()) {\r\n            return res.status(401).send({\r\n                message: 'User is not logged in'\r\n            });\r\n        }\r\n        next();\r\n    },\r\n    list: (req, res, next) => {\r\n        User.find({}, (err, users) => {\r\n            if (err) {\r\n                return next(err);\r\n            } else {\r\n                res.json(users);\r\n            }\r\n        });\r\n    },\r\n    create: (req, res, next) => {\r\n        var user = new User(req.body);\r\n        user.save((err) => {\r\n            if (err) {\r\n                return next(err);\r\n            } else {\r\n                res.json(user);\r\n            }\r\n        });\r\n    },\r\n    login: (req, res, next) => {\r\n        passport.authenticate('local', function (err, user, info) {\r\n            if (err) { return next(err); }\r\n            if (!user) { return res.send('false'); }\r\n            req.user = user;\r\n            var token = jwt.sign(user, 'dddddafaefafaf');\r\n            res.json(token);\r\n        })(req, res, next);\r\n    },\r\n    logout: (req, res, next) => {\r\n        res.json({ user: 'logout' });\r\n    }\r\n}\r\n"]}